	/**
		----------- Definição dos conceitos base do problema -----------
	*/
	abstract sig Vehicle {
		 engine: one Engine_Status,
		 inserted_key : one Inserted_Key,
		 ignition_pos : one Ignition_Pos,
		 rotary : one Rotary,
		 lights: one Lights

	}
	abstract sig Lights {
		lowbeam_l: one Lowbeam,
		lowbeam_r: one Lowbeam,
		highbeams: one Highbeam
	}	

	/** Definição dos tipos de veículo*/
	sig USA,EU,CAN extends Vehicle{}

	/** Definição dos butões */
	enum Button {Engine_Status, Inserted_Key, Ignition_Pos,Rotary}
	enum Switch {Lowbeam, Highbeam}
	
	var sig Activate in Switch{}
	var sig Auto in Rotary {}
	var sig On in Button {}
	
	
	/** Definição do estado do motor -> ON ou OFF */
//	sig Engine_Status extends Button {}

	/** Definição do estado da inserção da chave -> ON-inserida ou OFF */	
//	sig  Inserted_Key extends Button {}
	
	/** Definição do estado da posição da chave na ingnição -> ON-inserida ou OFF */
//	sig  Ignition_Pos extends Button {}

	/** Predicado para inserir a chave*/
	
	fact belongs {
		/** 
		Todos os veículos tem botões 
		*/
		always (all v:Vehicle| always one v.inserted_key)
		always (all v:Vehicle| always one v.engine)
		always (all v:Vehicle| always one v.ignition_pos)
		always (all v:Vehicle| always one v.rotary)
		always (all v:Vehicle| always one v.lights)
		always (all l:Lights | always one l.lowbeam_r)
		always (all l:Lights | always one l.lowbeam_l)
		
		/**
		Os botões e sensores apenas pertencem a um veículo 
		*/
		always (all v1,v2 : Vehicle | v1.inserted_key = v2.inserted_key implies v1=v2)
		always (all v1,v2:Vehicle | v1.engine=v2.engine implies v1=v2)
		always (all v1,v2:Vehicle | v1.ignition_pos=v2.ignition_pos implies v1=v2)
		always (all v1,v2:Vehicle | v1.rotary=v2.rotary implies v1=v2)
		always (all v1,v2:Vehicle | v1.lights=v2.lights implies v1=v2)
		
		/** 
		Tipos de luzes apenas pertencem a um sistema de luz
		*/
		always (all l1,l2:Lights | l1.lowbeam_r = l2.lowbeam:_r implies l1=l2)
		always (all l1,l2:Lights | l1.lowbeam_l = l2.lowbeam:_l implies l1=l2)
		
			 
	}
	/** Predicado para inserir a chave*/
	pred insert_key [v:Vehicle]{
		//Pré-condição
		no v.inserted_key:>On
		//Pós-Condição
		v.inserted_key:>On' = v.inserted_key:>On + v.inserted_key
		//Frame Condition
		v.engine:>On'= v.engine:>On
		v.ignition_pos:>On'=v.ignition_pos:>On
		v.rotary:>Auto' = v.rotary:>Auto
		v.engine:>On' = v.engine:>On
		v.rotary:>On' = v.rotary:>On
		Auto' = Auto
	}
	
	/** Predicado para inserir a chave*/
	pred remove_key [v:Vehicle]{
		//Pré-condição
		one v.inserted_key:>On and no v.ignition_pos:>On
		//Pós-Condição
		v.inserted_key:>On' = v.inserted_key:>On - v.inserted_key
		// Frame-Condition
		v.ignition_pos:>On' = v.ignition_pos:>On
		v.engine:>On' = v.engine:>On
		v.rotary:>On' = v.rotary:>On
		Auto' = Auto 
	}
	/** Predicado para colocar a chave na ignição */
	pred ignition_key [v:Vehicle]{
		//Pré-condição
		one v.inserted_key:>On
		//Pós-Condição
		v.ignition_pos:>On' = v.ignition_pos:>On + v.ignition_pos
		//Frame Condition
		v.inserted_key:>On'=v.inserted_key:>On
		v.engine:>On'= v.engine:>On
		v.rotary:>On' = v.rotary:>On
		Auto' = Auto
		
	}
	
	/** Predicado para tirar a chave da igninção*/
	pred no_ignition_key[v:Vehicle]{
		//Pré-condição
		one v.ignition_pos:>On and one v.inserted_key:>On and no v.engine:>On
		//Pós-condição
		v.ignition_pos:>On' = v.ignition_pos:>On - v.ignition_pos
		//Frame condition
		v.inserted_key:>On'=v.inserted_key:>On
		v.engine:>On'= v.engine:>On
		v.rotary:>On' = v.rotary:>On
		Auto' = Auto
	}


	/** Predicado para ligar o motor*/
	pred engine_start [v:Vehicle]{
		//Pré-condição
		one v.ignition_pos:>On and no v.engine:>On
		//Pós-Condição
		v.engine:>On' = v.engine:>On + v.engine
		// Frame-Condition
		v.ignition_pos:>On' = v.ignition_pos:>On
		v.inserted_key:>On'=v.inserted_key:>On
		v.rotary:>On' = v.rotary:>On
		Auto' = Auto
	}
	/** Predicado para desligar o motor*/
	pred engine_stop[v:Vehicle]{
		//Pré-condição
		one v.engine:>On and one v.ignition_pos:>On
		//Pós-Condição
		v.engine:>On' = v.engine:>On - v.engine
		v.ignition_pos:>On' = v.ignition_pos:>On - v.ignition_pos
		// Frame-Condition
		v.inserted_key:>On'=v.inserted_key:>On
		v.rotary:>On' = v.rotary:>On
		Auto' = Auto
	}
	
	/** Predicado para ligar o controlador de luzes  (Modo manual)*/
	pred rotary_on[v:Vehicle]{
		//Pré-condição
		no v.rotary:>On
		//Pós-condição
		v.rotary:>On' = v.rotary:>On + v.rotary
		v.rotary:>Auto' = v.rotary:>Auto - v.rotary
		//Frame-Condition
		v.ignition_pos:>On' = v.ignition_pos:>On
		v.inserted_key:>On'=v.inserted_key:>On
		v.engine:>On' = v.engine:>On

	}

	/** Predicado para ligar o controlador de luzes  (Modo Automático)*/
	pred rotary_auto[v:Vehicle]{
		//Pré-condição
		no v.rotary:>Auto
		//Pós-condição
		v.rotary:>On' = v.rotary:>On - v.rotary
		v.rotary:>Auto' = v.rotary:>Auto + v.rotary
		//Frame-Condition
		v.ignition_pos:>On' = v.ignition_pos:>On
		v.inserted_key:>On'=v.inserted_key:>On
		v.engine:>On' = v.engine:>On
	}
	
	pred rotary_off[v:Vehicle]{
		//Pré-condição
		one v.rotary:>Auto or one v.rotary:>On
		//Pós-condição
		v.rotary:>On' = v.rotary:>On - v.rotary
		v.rotary:>Auto' = v.rotary:>Auto - v.rotary
		//Frame-Condition
		v.ignition_pos:>On' = v.ignition_pos:>On
		v.inserted_key:>On'=v.inserted_key:>On
		v.engine:>On' = v.engine:>On
	}


	

	/** Predicado que permite ao sistema não efetuar qualquer ação*/
	pred skip[]{
	On'=On
	Button'=Button
	}

	pred init{

	all e:Engine_Status| e not in On
	all k:Inserted_Key | k not in On
	all i:Ignition_Pos | i not in On
	all r:Rotary | r not in On
	all r:Rotary | r not in Auto

	}

	fact event {
		init 
		always (some v:Vehicle| rotary_on[v] or insert_key[v] or ignition_key[v] or engine_start[v] or 
							remove_key[v] or no_ignition_key[v] or engine_stop[v] or rotary_auto[v] or rotary_off[v])
	}
 	run{} for 10 but exactly 1 USA
