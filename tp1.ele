/* 
	Definição dos conceitos base do problema
*/
abstract sig Vehicle {
	engine: one Engine_Status,
	danger: one Danger_Button,
	rotary: one Rotary,
	daytime_light: one Daytime_Light
}
abstract sig Button {}

sig Rotary extends Button{}

/* 
	Definição dos tipos de veículo
*/
sig USA,EU,CAN extends Vehicle{}

/**sig BLIN extends USA{
	dark: one Darkness_Mode,
} -> nao sabemos como tratar
*/

/* 
	Definição do estado dos butões
*/
var sig On in Button{}
var sig Auto in Rotary{}


/* 
	Definição dos butões
*/
sig Danger_Button extends Button {}
sig Darkness_Mode extends Button {}
sig Engine_Status extends Button {} 
sig Daytime_Light extends Button {}
/* 
	Definição de predicados 
*/

pred init {
	/* Todos os carros iniciam com o motor desligado*/
	no engine.On
	no rotary.On
	no rotary.Auto
	no danger.On
	no daytime_light.On
	/* Todos os carros iniciam com as luzes desligadas*/
 	//no dark.On

}

fact belongs_to {
	/* 
	Todos os veículos tem botões 
	*/
	all v:Vehicle| always one v.danger
	all v:Vehicle| always one v.engine
	all v:Vehicle| always one v.rotary
	all v:Vehicle| always one v.daytime_light
	/* 
	Os botões e sensores apenas pertencem a um veículo ??
	*/
	all v1,v2:Vehicle | v1.danger=v2.danger implies v1=v2
	all v1,v2:Vehicle | v1.engine=v2.engine implies v1=v2
	all v1,v2:Vehicle | v1.rotary=v2.rotary implies v1=v2
	all v1,v2:Vehicle | v1.daytime_light=v2.daytime_light implies v1=v2
}

pred engine_start [v:Vehicle] {
	//pre Condição
	v.engine not in On
	//Pos Condição 
	v.engine in On'
	//Frame Condição?? (n sei tradução xD)
        Auto' = Auto
	On in On'
	 
}

pred rotary_On [v:Vehicle]{
	//pre Condição
	v.rotary not in On
	//Pos Condição 
	v.rotary in On' and v.rotary not in Auto'
	//Frame Condição?? (n sei tradução xD)
	On in On'
	Auto' = Auto
} 

pred rotary_Auto [v:Vehicle]{
	//pre Condição
	v.rotary not in Auto
	//Pos Condição 
	v.rotary in Auto' and v.rotary not in On'
	//Frame Condição?? (n sei tradução xD)
	On' = On
	Auto in Auto'
} 


pred skip[] {
	On' = On
	Auto' = Auto
}

fact event{
	/* so se pode passar de um estado para um novo caso exista 
	   uma operação de leitura ou de escrita
	*/
	init 
	always (some v :Vehicle | rotary_Auto[v] or engine_start[v] or rotary_On[v] or skip[])
}
run{} for 12 but exactly 1 USA, exactly 1 EU, exactly 1 CAN
